{"ast":null,"code":"var _jsxFileName = \"/Users/renaudbressand/Work/an-awesome-next-app-this-is-like-the-1000-try/prismic.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\n/** Example file */\nimport Prismic from 'prismic-javascript';\nimport Link from 'next/link';\nimport smConfig from './sm.json';\nexport const apiEndpoint = smConfig.apiEndpoint; // -- Access Token if the repository is not public\n// Generate a token in your dashboard and configure it here if your repository is private\n\nexport const accessToken = ''; // -- Link resolution rules\n// Manages the url links to internal Prismic documents\n\nexport const linkResolver = doc => {\n  if (doc.type === '') {\n    return `/blog/${doc.uid}`;\n  }\n\n  return '/';\n}; // Additional helper function for Next/Link components\n\nexport const hrefResolver = doc => {\n  if (doc.type === 'post') {\n    return '/blog/[uid]';\n  }\n\n  return '/';\n};\nexport const customLink = (type, element, content, children, index) => __jsx(Link, {\n  key: index,\n  href: hrefResolver(element.data),\n  as: linkResolver(element.data),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 3\n  }\n}, __jsx(\"a\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }\n}, content));\nexport const Router = {\n  routes: [{\n    \"type\": \"page\",\n    \"path\": \"/:uid\"\n  }],\n  href: type => {\n    const route = Router.routes.find(r => r.type === type);\n    return route && route.href;\n  }\n};\nexport const Client = (req = null, options = {}) => Prismic.client(apiEndpoint, Object.assign({\n  routes: Router.routes\n}, options));","map":{"version":3,"sources":["/Users/renaudbressand/Work/an-awesome-next-app-this-is-like-the-1000-try/prismic.js"],"names":["Prismic","Link","smConfig","apiEndpoint","accessToken","linkResolver","doc","type","uid","hrefResolver","customLink","element","content","children","index","data","Router","routes","href","route","find","r","Client","req","options","client","Object","assign"],"mappings":";;;;AAAA;AAEA,OAAOA,OAAP,MAAoB,oBAApB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAEA,OAAOC,QAAP,MAAqB,WAArB;AAEA,OAAO,MAAMC,WAAW,GAAGD,QAAQ,CAACC,WAA7B,C,CAEP;AACA;;AACA,OAAO,MAAMC,WAAW,GAAG,EAApB,C,CAEP;AACA;;AACA,OAAO,MAAMC,YAAY,GAAIC,GAAD,IAAS;AACnC,MAAIA,GAAG,CAACC,IAAJ,KAAa,EAAjB,EAAqB;AACnB,WAAQ,SAAQD,GAAG,CAACE,GAAI,EAAxB;AACD;;AACD,SAAO,GAAP;AACD,CALM,C,CAOP;;AACA,OAAO,MAAMC,YAAY,GAAIH,GAAD,IAAS;AACnC,MAAIA,GAAG,CAACC,IAAJ,KAAa,MAAjB,EAAyB;AACvB,WAAO,aAAP;AACD;;AACD,SAAO,GAAP;AACD,CALM;AAOP,OAAO,MAAMG,UAAU,GAAG,CAACH,IAAD,EAAOI,OAAP,EAAgBC,OAAhB,EAAyBC,QAAzB,EAAmCC,KAAnC,KACxB,MAAC,IAAD;AACE,EAAA,GAAG,EAAEA,KADP;AAEE,EAAA,IAAI,EAAEL,YAAY,CAACE,OAAO,CAACI,IAAT,CAFpB;AAGE,EAAA,EAAE,EAAEV,YAAY,CAACM,OAAO,CAACI,IAAT,CAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAIH,OAAJ,CALF,CADK;AAUP,OAAO,MAAMI,MAAM,GAAG;AACpBC,EAAAA,MAAM,EAAE,CAAC;AAAC,YAAO,MAAR;AAAe,YAAO;AAAtB,GAAD,CADY;AAGpBC,EAAAA,IAAI,EAAGX,IAAD,IAAU;AACd,UAAMY,KAAK,GAAGH,MAAM,CAACC,MAAP,CAAcG,IAAd,CAAmBC,CAAC,IAAIA,CAAC,CAACd,IAAF,KAAWA,IAAnC,CAAd;AACA,WAAOY,KAAK,IAAIA,KAAK,CAACD,IAAtB;AACD;AANmB,CAAf;AASP,OAAO,MAAMI,MAAM,GAAG,CAACC,GAAG,GAAG,IAAP,EAAaC,OAAO,GAAG,EAAvB,KACpBxB,OAAO,CAACyB,MAAR,CAAetB,WAAf,EAA4BuB,MAAM,CAACC,MAAP,CAAc;AAAEV,EAAAA,MAAM,EAAED,MAAM,CAACC;AAAjB,CAAd,EAAyCO,OAAzC,CAA5B,CADK","sourcesContent":["/** Example file */\r\n\r\nimport Prismic from 'prismic-javascript'\r\nimport Link from 'next/link'\r\n\r\nimport smConfig from './sm.json'\r\n\r\nexport const apiEndpoint = smConfig.apiEndpoint\r\n\r\n// -- Access Token if the repository is not public\r\n// Generate a token in your dashboard and configure it here if your repository is private\r\nexport const accessToken = ''\r\n\r\n// -- Link resolution rules\r\n// Manages the url links to internal Prismic documents\r\nexport const linkResolver = (doc) => {\r\n  if (doc.type === '') {\r\n    return `/blog/${doc.uid}`\r\n  }\r\n  return '/'\r\n}\r\n\r\n// Additional helper function for Next/Link components\r\nexport const hrefResolver = (doc) => {\r\n  if (doc.type === 'post') {\r\n    return '/blog/[uid]'\r\n  }\r\n  return '/'\r\n}\r\n\r\nexport const customLink = (type, element, content, children, index) => (\r\n  <Link\r\n    key={index}\r\n    href={hrefResolver(element.data)}\r\n    as={linkResolver(element.data)}\r\n  >\r\n    <a>{content}</a>\r\n  </Link>\r\n)\r\n\r\nexport const Router = {\r\n  routes: [{\"type\":\"page\",\"path\":\"/:uid\"}],\r\n\r\n  href: (type) => {\r\n    const route = Router.routes.find(r => r.type === type);\r\n    return route && route.href;\r\n  }\r\n};\r\n\r\nexport const Client = (req = null, options = {}) => (\r\n  Prismic.client(apiEndpoint, Object.assign({ routes: Router.routes }, options))\r\n)"]},"metadata":{},"sourceType":"module"}